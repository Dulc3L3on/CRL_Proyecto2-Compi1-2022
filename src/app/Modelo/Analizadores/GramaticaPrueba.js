/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaPrueba = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,7],$V2=[1,8,16],$V3=[1,18],$V4=[2,10],$V5=[12,20],$V6=[1,34],$V7=[1,36],$V8=[1,40],$V9=[1,8,16,24,26,50,56],$Va=[1,59],$Vb=[1,60],$Vc=[1,55],$Vd=[1,56],$Ve=[1,57],$Vf=[1,58],$Vg=[1,63],$Vh=[1,103],$Vi=[1,109],$Vj=[1,8,16,24,26,50];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"body":3,"declaracion_funcion":4,"funcion":5,"metodo":6,"main":7,"content_type":8,"ID":9,"(":10,"params":11,")":12,":":13,"NEW_LINE":14,"bloque_tipo1":15,"VOID":16,"bloque_tipo2":17,"MAIN":18,"lista_params":19,",":20,"param":21,"bloque":22,"valor_retorno":23,"return":24,"sentencias":25,"SANGRIA":26,"sent_elements":27,"definicion_var":28,"asignacion":29,"ciclo":30,"sentencia_control":31,"mostrar":32,"dibujar":33,"for":34,"while":35,"PARA":36,"INT":37,"=":38,"INTEGER":39,";":40,"expr":41,"INCREMENTO":42,"bloque_ciclos":43,"MIENTRAS":44,"contenido_bloque_ciclo":45,"stream_handler":46,"stream_handler_elements":47,"CONTINUAR":48,"DETENER":49,"RETORNO":50,"sentencias_ciclo":51,"sent_elements_ciclo":52,"sentencia_control_ciclos":53,"SI":54,"else_ciclos":55,"SINO":56,"bloque_control":57,"sentencia_else":58,"MOSTRAR":59,"CADENA":60,"contenido_asignacion":61,"DRAW_AST":62,"DRAW_EXP":63,"DRAW_TS":64,"$accept":0,"$end":1},
terminals_: {2:"error",8:"content_type",9:"ID",10:"(",12:")",13:":",14:"NEW_LINE",16:"VOID",18:"MAIN",20:",",24:"return",26:"SANGRIA",28:"definicion_var",29:"asignacion",36:"PARA",37:"INT",38:"=",39:"INTEGER",40:";",41:"expr",42:"INCREMENTO",44:"MIENTRAS",48:"CONTINUAR",49:"DETENER",50:"RETORNO",54:"SI",56:"SINO",59:"MOSTRAR",60:"CADENA",62:"DRAW_AST",63:"DRAW_EXP",64:"DRAW_TS"},
productions_: [0,[3,2],[3,1],[4,1],[4,1],[4,1],[5,8],[6,8],[7,7],[11,1],[11,0],[19,3],[19,1],[21,2],[15,3],[15,2],[17,1],[17,3],[17,2],[22,2],[22,1],[25,2],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[30,1],[30,1],[34,12],[35,7],[43,2],[43,1],[43,1],[46,3],[47,1],[47,1],[47,1],[47,1],[45,2],[45,1],[51,2],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[53,8],[55,4],[55,0],[31,8],[58,4],[58,0],[57,3],[57,2],[57,1],[57,3],[57,2],[32,6],[61,3],[61,1],[33,5],[33,5],[33,4],[23,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,5:3,6:4,7:5,8:$V0,16:$V1},{1:[3],4:8,5:3,6:4,7:5,8:$V0,16:$V1},o($V2,[2,2]),o($V2,[2,3]),o($V2,[2,4]),o($V2,[2,5]),{9:[1,9]},{9:[1,10],18:[1,11]},o($V2,[2,1]),{10:[1,12]},{10:[1,13]},{10:[1,14]},{8:$V3,11:15,12:$V4,19:16,21:17},{8:$V3,11:19,12:$V4,19:16,21:17},{12:[1,20]},{12:[1,21]},{12:[2,9],20:[1,22]},o($V5,[2,12]),{9:[1,23]},{12:[1,24]},{13:[1,25]},{13:[1,26]},{8:$V3,21:27},o($V5,[2,13]),{13:[1,28]},{14:[1,29]},{14:[1,30]},o($V5,[2,11]),{14:[1,31]},{17:32,22:33,24:$V6,25:35,26:$V7},{15:37,22:38,23:39,25:35,26:$V7,50:$V8},{17:41,22:33,24:$V6,25:35,26:$V7},o($V2,[2,8]),o($V2,[2,16],{25:43,24:[1,42],26:$V7}),{14:[1,44]},o($V9,[2,20]),{27:45,28:[1,46],29:[1,47],30:48,31:49,32:50,33:51,34:52,35:53,36:$Va,44:$Vb,54:[1,54],59:$Vc,62:$Vd,63:$Ve,64:$Vf},o($V2,[2,6]),{23:61,25:43,26:$V7,50:$V8},{14:[1,62]},{41:$Vg},o($V2,[2,7]),{14:[1,64]},o($V9,[2,19]),o($V2,[2,18]),o($V9,[2,21]),o($V9,[2,22]),o($V9,[2,23]),o($V9,[2,24]),o($V9,[2,25]),o($V9,[2,26]),o($V9,[2,27]),o($V9,[2,28]),o($V9,[2,29]),{10:[1,65]},{10:[1,66]},{10:[1,67]},{10:[1,68]},{10:[1,69]},{37:[1,70]},{10:[1,71]},{14:[1,72]},o($V2,[2,15]),{14:[2,66]},o($V2,[2,17]),{41:[1,73]},{60:[1,74]},{9:[1,75]},{41:[1,76]},{12:[1,77]},{9:[1,78]},{41:[1,79]},o($V2,[2,14]),{12:[1,80]},{41:[1,82],61:81},{12:[1,83]},{12:[1,84]},{14:[1,85]},{38:[1,86]},{12:[1,87]},{13:[1,88]},{12:[1,89],20:[1,90]},o($V5,[2,62]),{14:[1,91]},{14:[1,92]},o($V9,[2,65]),{39:[1,93]},{13:[1,94]},{14:[1,95]},{14:[1,96]},{41:[1,97]},o($V9,[2,63]),o($V9,[2,64]),{40:[1,98]},{14:[1,99]},{22:101,23:102,24:$Vh,25:35,26:$V7,50:$V8,57:100},o($V9,[2,60]),o($V5,[2,61]),{41:[1,104]},{26:$Vi,43:105,45:106,46:107,51:108},o($Vj,[2,54],{58:110,56:[1,111]}),o([1,8,16,56],[2,57],{25:43,23:112,24:[1,113],26:$V7,50:$V8}),{14:[1,114]},{14:[1,115]},{40:[1,116]},o($V9,[2,31]),o([1,8,16,24,50,56],[2,33],{46:117,51:118,26:$Vi}),o($V9,[2,34]),o($V9,[2,41]),{23:124,28:[1,125],29:[1,126],30:127,32:129,33:130,34:52,35:53,36:$Va,44:$Vb,47:119,48:[1,121],49:[1,122],50:[1,123],52:120,53:128,54:[1,131],59:$Vc,62:$Vd,63:$Ve,64:$Vf},o($V9,[2,52]),{13:[1,132]},{14:[1,133]},{14:[1,134]},o($V9,[2,56]),o($V9,[2,59]),{42:[1,135]},o($V9,[2,32]),o($V9,[2,40]),{14:[1,136]},o($V9,[2,42]),{14:[2,36]},{14:[2,37]},{14:[2,38],41:$Vg},{14:[2,39]},o($V9,[2,43]),o($V9,[2,44]),o($V9,[2,45]),o($V9,[2,46]),o($V9,[2,47]),o($V9,[2,48]),{10:[1,137]},{14:[1,138]},o($V9,[2,55]),o($V9,[2,58]),{13:[1,139]},o($V9,[2,35]),{41:[1,140]},{22:101,23:102,24:$Vh,25:35,26:$V7,50:$V8,57:141},{14:[1,142]},{12:[1,143]},o($V9,[2,53]),{26:$Vi,43:144,45:106,46:107,51:108},{13:[1,145]},o($V9,[2,30]),{14:[1,146]},{26:$Vi,43:147,45:106,46:107,51:108},o($Vj,[2,51],{55:148,56:[1,149]}),o($V9,[2,49]),{13:[1,150]},{14:[1,151]},{26:$Vi,43:152,45:106,46:107,51:108},o($V9,[2,50])],
defaultActions: {63:[2,66],121:[2,36],122:[2,37],124:[2,39]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};






/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 'IMPORT';
break;
case 1:return 'INCERTEZA';
break;
case 2:return 18;
break;
case 3:return 37;
break;
case 4:return 'DOUBLE';
break;
case 5:return 'STRING';
break;
case 6:return 'BOOLEAN';
break;
case 7:return 'CHAR';
break;
case 8:return 16;
break;
case 9:return 54;       
break;
case 10:return 56;
break;
case 11:return 36;
break;
case 12:return 44;
break;
case 13:return 49;
break;
case 14:return 48;
break;
case 15:return 59;
break;
case 16:return 62;
break;
case 17:return 63;
break;
case 18:return 64;
break;
case 19:return 'TRUE';
break;
case 20:return 'FALSE';
break;
case 21:return '+';
break;
case 22:return '-';
break;
case 23:return '*';
break;
case 24:return '/';
break;
case 25:return '%';
break;
case 26:return '^';
break;
case 27:return '==';
break;
case 28:return '!=';
break;
case 29:return '<';
break;
case 30:return '>';
break;
case 31:return '<=';
break;
case 32:return '>=';
break;
case 33:return '~';
break;
case 34:return '&&';
break;
case 35:return '||';
break;
case 36:return '|&';
break;
case 37:return '!';
break;
case 38:return 42;
break;
case 39:return 42;
break;
case 40:return 10;
break;
case 41:return 12;
break;
case 42:return 13;
break;
case 43:return 38;
break;
case 44:return 20;
break;
case 45:return 40;
break;
case 46:return 50;
break;
case 47:return 14
break;
case 48:return 26;
break;
case 49:return 39;
break;
case 50:return 'DECIMAL';
break;
case 51:return 'CHARACTER';
break;
case 52:return '.';
break;
case 53:return 'CRL';
break;
case 54:return 9;
break;
case 55:/*ignore*/
break;
case 56:this.begin('COMMENT');
break;
case 57:this.popState();
break;
case 58:/*ignore*/
break;
case 59:this.begin('STRING');
break;
case 60:return 60;
break;
case 61:this.yybegin('ERROR');
break;
case 62:this.yybegin('ERROR');
break;
case 63:this.popState();
break;
case 64:return 'EOF';
break;
case 65:this.popState();
break;
case 66:this.yybegin('ERROR');
break;
}
},
rules: [/^(?:Importar\b)/,/^(?:Incerteza\b)/,/^(?:Principal\b)/,/^(?:Int\b)/,/^(?:Double\b)/,/^(?:String\b)/,/^(?:Boolean\b)/,/^(?:Char\b)/,/^(?:Void\b)/,/^(?:Si\b)/,/^(?:Sino\b)/,/^(?:Para\b)/,/^(?:Mientras\b)/,/^(?:Detener\b)/,/^(?:Continuar\b)/,/^(?:Mostrar\b)/,/^(?:DibujarAST\b)/,/^(?:DibujarEXP\b)/,/^(?:DibujarTS\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:<=)/,/^(?:>=)/,/^(?:~)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\|&)/,/^(?:!)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\()/,/^(?:\))/,/^(?::)/,/^(?:=)/,/^(?:,)/,/^(?:;)/,/^(?:Retorno\b)/,/^(?:\n+)/,/^(?:\t+)/,/^(?:[0-9]+\b)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:'([a-zA-Z\u00f1\u00d1])|\s')/,/^(?:\.)/,/^(?:crl\b)/,/^(?:(\$|([a-zA-Z\u00f1\u00d1]))|(_|\$|([a-zA-Z\u00f1\u00d1]))(_|\$|([a-zA-Z\u00f1\u00d1])|[0-9])+)/,/^(?:!!.*)/,/^(?:''')/,/^(?:''')/,/^(?:.)/,/^(?:["])/,/^(?:[^"\n]*)/,/^(?:[\n])/,/^(?:$)/,/^(?:["])/,/^(?:$)/,/^(?:\s+)/,/^(?:[.])/],
conditions: {"SSTRING":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,61,62,63,64,66],"inclusive":true},"ERROR":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,64,65,66],"inclusive":true},"COMMENT":{"rules":[57,58],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,64,66],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaPrueba;
exports.Parser = GramaticaPrueba.Parser;
exports.parse = function () { return GramaticaPrueba.parse.apply(GramaticaPrueba, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}