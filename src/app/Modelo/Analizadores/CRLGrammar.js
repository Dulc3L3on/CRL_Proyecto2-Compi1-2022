/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var CRLGrammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,9],$V2=[1,19],$V3=[1,20],$V4=[1,21],$V5=[1,22],$V6=[1,23],$V7=[1,24],$V8=[1,14],$V9=[34,36,37,38,39,40,41],$Va=[5,34,36,37,38,39,40,41],$Vb=[11,16,34,36,37,38,39,40,41],$Vc=[1,68],$Vd=[1,69],$Ve=[1,95],$Vf=[1,87],$Vg=[1,92],$Vh=[1,78],$Vi=[1,84],$Vj=[1,86],$Vk=[1,88],$Vl=[1,90],$Vm=[1,93],$Vn=[1,94],$Vo=[29,52],$Vp=[1,114],$Vq=[1,115],$Vr=[15,29,32,54,56,97],$Vs=[1,116],$Vt=[1,117],$Vu=[1,118],$Vv=[15,29,32,54,56,57,59,60,97],$Vw=[15,29,32,54,56,57,59,60,62,97],$Vx=[1,121],$Vy=[1,122],$Vz=[1,123],$VA=[1,124],$VB=[1,125],$VC=[1,126],$VD=[1,127],$VE=[15,29,32,54,56,57,59,60,62,64,66,67,68,69,70,71,97],$VF=[1,128],$VG=[15,29,32,54,56,57,59,60,62,64,66,67,68,69,70,71,72,97],$VH=[1,129],$VI=[15,29,32,54,56,57,59,60,62,64,66,67,68,69,70,71,72,74,97],$VJ=[1,130],$VK=[15,29,32,54,56,57,59,60,62,64,66,67,68,69,70,71,72,74,76,97],$VL=[29,32];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"clase":4,"EOF":5,"header":6,"content":7,"imports":8,"incerteza":9,"import":10,"IMPORT":11,"ID":12,".":13,"CRL":14,"NEW_LINE":15,"INCERTEZA":16,"DECIMAL":17,"sentences":18,"class_content":19,"function_content":20,"class_content_elements":21,"declaracion_var_global":22,"declaracion_funcion":23,"definicion_var":24,"content_type":25,"creacion_vars":26,"var_list":27,"asignation_value":28,",":29,"(":30,"params":31,")":32,":":33,"VOID":34,"MAIN":35,"INT":36,"DOUBLE":37,"STRING":38,"BOOLEAN":39,"CHAR":40,"SANGRIA":41,"function_sentence":42,"only_sentence":43,"loop_sentence":44,"control_sentence":45,"declaracion_var":46,"asignacion_var":47,"invocacion":48,"mostrar":49,"dibujar":50,"breakpoints":51,"=":52,"expr":53,"+":54,"expr2":55,"-":56,"*":57,"expr3":58,"/":59,"%":60,"expr4":61,"^":62,"expr5":63,"==":64,"expr6":65,"!=":66,"<":67,">":68,"<=":69,">=":70,"~":71,"||":72,"expr7":73,"|&":74,"expr8":75,"&&":76,"expr9":77,"!":78,"expr10":79,"INTEGER":80,"CADENA":81,"booleano":82,"CHARACTER":83,"contenido_var":84,"TRUE":85,"FALSE":86,"argumentos":87,"MOSTRAR":88,"contenido_asignacion":89,"DRAW_AST":90,"DRAW_EXP":91,"DRAW_TS":92,"return":93,"CONTINUAR":94,"DETENER":95,"PARA":96,";":97,"INCREMENTO":98,"MIENTRAS":99,"SI":100,"SINO":101,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"IMPORT",12:"ID",13:".",14:"CRL",15:"NEW_LINE",16:"INCERTEZA",17:"DECIMAL",29:",",30:"(",31:"params",32:")",33:":",34:"VOID",35:"MAIN",36:"INT",37:"DOUBLE",38:"STRING",39:"BOOLEAN",40:"CHAR",41:"SANGRIA",46:"declaracion_var",52:"=",54:"+",56:"-",57:"*",59:"/",60:"%",62:"^",64:"==",66:"!=",67:"<",68:">",69:"<=",70:">=",71:"~",72:"||",74:"|&",76:"&&",78:"!",80:"INTEGER",81:"CADENA",83:"CHARACTER",85:"TRUE",86:"FALSE",88:"MOSTRAR",90:"DRAW_AST",91:"DRAW_EXP",92:"DRAW_TS",93:"return",94:"CONTINUAR",95:"DETENER",96:"PARA",97:";",98:"INCREMENTO",99:"MIENTRAS",100:"SI",101:"SINO"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,1],[6,1],[8,2],[8,1],[10,5],[9,3],[7,2],[7,1],[18,1],[18,1],[19,2],[21,1],[21,1],[22,1],[24,2],[26,2],[27,3],[27,1],[23,6],[23,6],[23,5],[25,1],[25,1],[25,1],[25,1],[25,1],[20,3],[42,1],[42,1],[42,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[47,2],[28,2],[53,3],[53,3],[53,1],[55,3],[55,3],[55,3],[55,1],[58,3],[58,1],[61,2],[61,1],[63,3],[63,3],[63,3],[63,3],[63,3],[63,3],[63,3],[63,1],[65,3],[65,1],[73,3],[73,1],[75,3],[75,1],[77,2],[77,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,3],[82,1],[82,1],[84,1],[84,1],[48,4],[48,3],[87,3],[87,1],[49,5],[89,3],[89,2],[50,4],[50,4],[50,3],[51,1],[51,2],[51,1],[51,1],[44,10],[44,5],[45,5],[45,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:8,11:$V0,16:$V1,18:7,19:10,20:11,21:13,22:15,23:16,24:17,25:18,34:$V2,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8},{1:[3]},{5:[1,25]},{7:26,18:7,19:10,20:11,21:13,22:15,23:16,24:17,25:18,34:$V2,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8},{5:[2,3],18:27,19:10,20:11,21:13,22:15,23:16,24:17,25:18,34:$V2,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8},o($V9,[2,5],{9:28,10:29,11:$V0,16:$V1}),o($V9,[2,6]),o($Va,[2,12]),o($Vb,[2,8]),{17:[1,30]},o($Va,[2,13]),o($Va,[2,14]),{12:[1,31]},{15:[1,32]},{12:[1,47],42:33,43:34,44:35,45:36,46:[1,37],47:38,48:39,49:40,50:41,51:42,88:[1,48],90:[1,49],91:[1,50],92:[1,51],93:[1,52],94:[1,53],95:[1,54],96:[1,43],99:[1,44],100:[1,45],101:[1,46]},{15:[2,16]},{15:[2,17]},{15:[2,18]},{12:[1,55],26:56,27:57},{12:[1,58],35:[1,59]},{12:[2,26]},{12:[2,27]},{12:[2,28]},{12:[2,29]},{12:[2,30]},{1:[2,1]},{5:[2,2],18:27,19:10,20:11,21:13,22:15,23:16,24:17,25:18,34:$V2,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8},o($Va,[2,11]),o($V9,[2,4]),o($Vb,[2,7]),{15:[1,60]},{13:[1,61]},o($Va,[2,15]),{15:[1,62]},{15:[2,32]},{15:[2,33]},{15:[2,34]},{15:[2,35]},{15:[2,36]},{15:[2,37]},{15:[2,38]},{15:[2,39]},{15:[2,40]},{36:[1,63]},{30:[1,64]},{30:[1,65]},{33:[1,66]},{28:67,30:$Vc,52:$Vd},{30:[1,70]},{30:[1,71]},{30:[1,72]},{30:[1,73]},{12:$Ve,15:[2,91],17:$Vf,30:$Vg,48:96,53:74,55:75,56:$Vh,58:76,61:77,63:79,65:80,73:81,75:82,77:83,78:$Vi,79:85,80:$Vj,81:$Vk,82:89,83:$Vl,84:91,85:$Vm,86:$Vn},{15:[2,93]},{15:[2,94]},o($Vo,[2,22],{30:[1,97]}),{15:[2,19]},{28:98,29:[1,99],52:$Vd},{30:[1,100]},{30:[1,101]},o($V9,[2,10]),{14:[1,102]},o($Va,[2,31]),{12:[1,103]},{12:$Ve,17:$Vf,30:$Vg,48:96,53:104,55:75,56:$Vh,58:76,61:77,63:79,65:80,73:81,75:82,77:83,78:$Vi,79:85,80:$Vj,81:$Vk,82:89,83:$Vl,84:91,85:$Vm,86:$Vn},{12:$Ve,17:$Vf,30:$Vg,48:96,53:105,55:75,56:$Vh,58:76,61:77,63:79,65:80,73:81,75:82,77:83,78:$Vi,79:85,80:$Vj,81:$Vk,82:89,83:$Vl,84:91,85:$Vm,86:$Vn},{15:[2,98]},{15:[2,41]},{12:$Ve,17:$Vf,30:$Vg,32:[1,107],48:96,53:108,55:75,56:$Vh,58:76,61:77,63:79,65:80,73:81,75:82,77:83,78:$Vi,79:85,80:$Vj,81:$Vk,82:89,83:$Vl,84:91,85:$Vm,86:$Vn,87:106},{12:$Ve,17:$Vf,30:$Vg,48:96,53:109,55:75,56:$Vh,58:76,61:77,63:79,65:80,73:81,75:82,77:83,78:$Vi,79:85,80:$Vj,81:$Vk,82:89,83:$Vl,84:91,85:$Vm,86:$Vn},{81:[1,110]},{12:[1,111]},{12:$Ve,17:$Vf,30:$Vg,48:96,53:112,55:75,56:$Vh,58:76,61:77,63:79,65:80,73:81,75:82,77:83,78:$Vi,79:85,80:$Vj,81:$Vk,82:89,83:$Vl,84:91,85:$Vm,86:$Vn},{32:[1,113]},{15:[2,92],54:$Vp,56:$Vq},o($Vr,[2,45],{57:$Vs,59:$Vt,60:$Vu}),o($Vv,[2,49]),o($Vv,[2,51],{62:[1,119]}),{12:$Ve,17:$Vf,30:$Vg,48:96,63:120,65:80,73:81,75:82,77:83,78:$Vi,79:85,80:$Vj,81:$Vk,82:89,83:$Vl,84:91,85:$Vm,86:$Vn},o($Vw,[2,53],{64:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),o($VE,[2,61],{72:$VF}),o($VG,[2,63],{74:$VH}),o($VI,[2,65],{76:$VJ}),o($VK,[2,67]),{12:$Ve,17:$Vf,30:$Vg,48:96,79:131,80:$Vj,81:$Vk,82:89,83:$Vl,84:91,85:$Vm,86:$Vn},o($VK,[2,69]),o($VK,[2,70]),o($VK,[2,71]),o($VK,[2,72]),o($VK,[2,73]),o($VK,[2,74]),o($VK,[2,75]),{12:$Ve,17:$Vf,30:$Vg,48:96,53:132,55:75,56:$Vh,58:76,61:77,63:79,65:80,73:81,75:82,77:83,78:$Vi,79:85,80:$Vj,81:$Vk,82:89,83:$Vl,84:91,85:$Vm,86:$Vn},o($VK,[2,77]),o($VK,[2,78]),o($VK,[2,79],{30:$Vc}),o($VK,[2,80]),{31:[1,133]},{15:[2,20]},{12:[1,134]},{31:[1,135]},{32:[1,136]},{15:[1,137]},{52:[1,138]},{32:[1,139],54:$Vp,56:$Vq},{32:[1,140],54:$Vp,56:$Vq},{29:[1,142],32:[1,141]},o($VK,[2,82]),o($VL,[2,84],{54:$Vp,56:$Vq}),{15:[2,42],54:$Vp,56:$Vq},{29:[1,144],89:143},{32:[1,145]},{32:[1,146],54:$Vp,56:$Vq},{15:[2,90]},{12:$Ve,17:$Vf,30:$Vg,48:96,55:147,56:$Vh,58:76,61:77,63:79,65:80,73:81,75:82,77:83,78:$Vi,79:85,80:$Vj,81:$Vk,82:89,83:$Vl,84:91,85:$Vm,86:$Vn},{12:$Ve,17:$Vf,30:$Vg,48:96,55:148,56:$Vh,58:76,61:77,63:79,65:80,73:81,75:82,77:83,78:$Vi,79:85,80:$Vj,81:$Vk,82:89,83:$Vl,84:91,85:$Vm,86:$Vn},{12:$Ve,17:$Vf,30:$Vg,48:96,56:$Vh,58:149,61:77,63:79,65:80,73:81,75:82,77:83,78:$Vi,79:85,80:$Vj,81:$Vk,82:89,83:$Vl,84:91,85:$Vm,86:$Vn},{12:$Ve,17:$Vf,30:$Vg,48:96,56:$Vh,58:150,61:77,63:79,65:80,73:81,75:82,77:83,78:$Vi,79:85,80:$Vj,81:$Vk,82:89,83:$Vl,84:91,85:$Vm,86:$Vn},{12:$Ve,17:$Vf,30:$Vg,48:96,56:$Vh,58:151,61:77,63:79,65:80,73:81,75:82,77:83,78:$Vi,79:85,80:$Vj,81:$Vk,82:89,83:$Vl,84:91,85:$Vm,86:$Vn},{12:$Ve,17:$Vf,30:$Vg,48:96,56:$Vh,58:152,61:77,63:79,65:80,73:81,75:82,77:83,78:$Vi,79:85,80:$Vj,81:$Vk,82:89,83:$Vl,84:91,85:$Vm,86:$Vn},o($Vw,[2,52],{64:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),{12:$Ve,17:$Vf,30:$Vg,48:96,65:153,73:81,75:82,77:83,78:$Vi,79:85,80:$Vj,81:$Vk,82:89,83:$Vl,84:91,85:$Vm,86:$Vn},{12:$Ve,17:$Vf,30:$Vg,48:96,65:154,73:81,75:82,77:83,78:$Vi,79:85,80:$Vj,81:$Vk,82:89,83:$Vl,84:91,85:$Vm,86:$Vn},{12:$Ve,17:$Vf,30:$Vg,48:96,65:155,73:81,75:82,77:83,78:$Vi,79:85,80:$Vj,81:$Vk,82:89,83:$Vl,84:91,85:$Vm,86:$Vn},{12:$Ve,17:$Vf,30:$Vg,48:96,65:156,73:81,75:82,77:83,78:$Vi,79:85,80:$Vj,81:$Vk,82:89,83:$Vl,84:91,85:$Vm,86:$Vn},{12:$Ve,17:$Vf,30:$Vg,48:96,65:157,73:81,75:82,77:83,78:$Vi,79:85,80:$Vj,81:$Vk,82:89,83:$Vl,84:91,85:$Vm,86:$Vn},{12:$Ve,17:$Vf,30:$Vg,48:96,65:158,73:81,75:82,77:83,78:$Vi,79:85,80:$Vj,81:$Vk,82:89,83:$Vl,84:91,85:$Vm,86:$Vn},{12:$Ve,17:$Vf,30:$Vg,48:96,65:159,73:81,75:82,77:83,78:$Vi,79:85,80:$Vj,81:$Vk,82:89,83:$Vl,84:91,85:$Vm,86:$Vn},{12:$Ve,17:$Vf,30:$Vg,48:96,73:160,75:82,77:83,78:$Vi,79:85,80:$Vj,81:$Vk,82:89,83:$Vl,84:91,85:$Vm,86:$Vn},{12:$Ve,17:$Vf,30:$Vg,48:96,75:161,77:83,78:$Vi,79:85,80:$Vj,81:$Vk,82:89,83:$Vl,84:91,85:$Vm,86:$Vn},{12:$Ve,17:$Vf,30:$Vg,48:96,77:162,78:$Vi,79:85,80:$Vj,81:$Vk,82:89,83:$Vl,84:91,85:$Vm,86:$Vn},o($VK,[2,68]),{32:[1,163],54:$Vp,56:$Vq},{32:[1,164]},o($Vo,[2,21]),{32:[1,165]},{33:[1,166]},o($Vb,[2,9]),{80:[1,167]},{33:[1,168]},{33:[1,169]},o($VK,[2,81]),{12:$Ve,17:$Vf,30:$Vg,48:96,53:170,55:75,56:$Vh,58:76,61:77,63:79,65:80,73:81,75:82,77:83,78:$Vi,79:85,80:$Vj,81:$Vk,82:89,83:$Vl,84:91,85:$Vm,86:$Vn},{29:[1,172],32:[1,171]},{12:$Ve,17:$Vf,30:$Vg,48:96,53:173,55:75,56:$Vh,58:76,61:77,63:79,65:80,73:81,75:82,77:83,78:$Vi,79:85,80:$Vj,81:$Vk,82:89,83:$Vl,84:91,85:$Vm,86:$Vn},{15:[2,88]},{15:[2,89]},o($Vr,[2,43],{57:$Vs,59:$Vt,60:$Vu}),o($Vr,[2,44],{57:$Vs,59:$Vt,60:$Vu}),o($Vv,[2,46]),o($Vv,[2,47]),o($Vv,[2,48]),o($Vv,[2,50]),o($VE,[2,54],{72:$VF}),o($VE,[2,55],{72:$VF}),o($VE,[2,56],{72:$VF}),o($VE,[2,57],{72:$VF}),o($VE,[2,58],{72:$VF}),o($VE,[2,59],{72:$VF}),o($VE,[2,60],{72:$VF}),o($VG,[2,62],{74:$VH}),o($VI,[2,64],{76:$VJ}),o($VK,[2,66]),o($VK,[2,76]),{33:[1,174]},{33:[1,175]},{15:[2,25]},{97:[1,176]},{15:[2,96]},{15:[2,97]},o($VL,[2,83],{54:$Vp,56:$Vq}),{15:[2,85]},{12:$Ve,17:$Vf,30:$Vg,48:96,53:177,55:75,56:$Vh,58:76,61:77,63:79,65:80,73:81,75:82,77:83,78:$Vi,79:85,80:$Vj,81:$Vk,82:89,83:$Vl,84:91,85:$Vm,86:$Vn},o($VL,[2,87],{54:$Vp,56:$Vq}),{15:[2,23]},{15:[2,24]},{12:$Ve,17:$Vf,30:$Vg,48:96,53:178,55:75,56:$Vh,58:76,61:77,63:79,65:80,73:81,75:82,77:83,78:$Vi,79:85,80:$Vj,81:$Vk,82:89,83:$Vl,84:91,85:$Vm,86:$Vn},o($VL,[2,86],{54:$Vp,56:$Vq}),{54:$Vp,56:$Vq,97:[1,179]},{98:[1,180]},{33:[1,181]},{15:[2,95]}],
defaultActions: {15:[2,16],16:[2,17],17:[2,18],20:[2,26],21:[2,27],22:[2,28],23:[2,29],24:[2,30],25:[2,1],34:[2,32],35:[2,33],36:[2,34],37:[2,35],38:[2,36],39:[2,37],40:[2,38],41:[2,39],42:[2,40],53:[2,93],54:[2,94],56:[2,19],66:[2,98],67:[2,41],98:[2,20],113:[2,90],145:[2,88],146:[2,89],166:[2,25],168:[2,96],169:[2,97],171:[2,85],174:[2,23],175:[2,24],181:[2,95]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};






/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 11;
break;
case 1:return 16;
break;
case 2:return 35;
break;
case 3:return 36;
break;
case 4:return 37;
break;
case 5:return 38;
break;
case 6:return 39;
break;
case 7:return 40;
break;
case 8:return 34;
break;
case 9:return 100;       
break;
case 10:return 101;
break;
case 11:return 96;
break;
case 12:return 99;
break;
case 13:return 95;
break;
case 14:return 94;
break;
case 15:return 88;
break;
case 16:return 90;
break;
case 17:return 91;
break;
case 18:return 92;
break;
case 19:return 85;
break;
case 20:return 86;
break;
case 21:return 54;
break;
case 22:return 56;
break;
case 23:return 57;
break;
case 24:return 59;
break;
case 25:return 60;
break;
case 26:return 62;
break;
case 27:return 64;
break;
case 28:return 66;
break;
case 29:return 67;
break;
case 30:return 68;
break;
case 31:return 69;
break;
case 32:return 70;
break;
case 33:return 71;
break;
case 34:return 76;
break;
case 35:return 72;
break;
case 36:return 74;
break;
case 37:return 78;
break;
case 38:return 98;
break;
case 39:return 98;
break;
case 40:return 30;
break;
case 41:return 32;
break;
case 42:return 33;
break;
case 43:return 52;
break;
case 44:return 29;
break;
case 45:return 97;
break;
case 46:return 'RETORNO';
break;
case 47:return 15
break;
case 48:return 41;
break;
case 49:return 80;
break;
case 50:return 17;
break;
case 51:return 83;
break;
case 52:return 13;
break;
case 53:return 14;
break;
case 54:return 12;
break;
case 55:/*ignore*/
break;
case 56:this.begin('COMMENT');
break;
case 57:this.popState();
break;
case 58:/*ignore*/
break;
case 59:this.begin('SSTRING');
break;
case 60:return 81;
break;
case 61:this.yybegin('ERROR');
break;
case 62:this.yybegin('ERROR');
break;
case 63:this.popState();
break;
case 64:return 5;
break;
case 65:this.popState();
break;
case 66:this.yybegin('ERROR');
break;
}
},
rules: [/^(?:Importar\b)/,/^(?:Incerteza\b)/,/^(?:Principal\b)/,/^(?:Int\b)/,/^(?:Double\b)/,/^(?:String\b)/,/^(?:Boolean\b)/,/^(?:Char\b)/,/^(?:Void\b)/,/^(?:Si\b)/,/^(?:Sino\b)/,/^(?:Para\b)/,/^(?:Mientras\b)/,/^(?:Detener\b)/,/^(?:Continuar\b)/,/^(?:Mostrar\b)/,/^(?:DibujarAST\b)/,/^(?:DibujarEXP\b)/,/^(?:DibujarTS\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:<=)/,/^(?:>=)/,/^(?:~)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\|&)/,/^(?:!)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\()/,/^(?:\))/,/^(?::)/,/^(?:=)/,/^(?:,)/,/^(?:;)/,/^(?:Retorno\b)/,/^(?:\n+)/,/^(?:\t+)/,/^(?:[0-9]+\b)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:'([a-zA-Z\u00f1\u00d1])|\s')/,/^(?:\.)/,/^(?:crl\b)/,/^(?:(\$|([a-zA-Z\u00f1\u00d1]))|(_|\$|([a-zA-Z\u00f1\u00d1]))(_|\$|([a-zA-Z\u00f1\u00d1])|[0-9])+)/,/^(?:!!.*)/,/^(?:''')/,/^(?:''')/,/^(?:.)/,/^(?:["])/,/^(?:[^"\n]*)/,/^(?:[\n])/,/^(?:$)/,/^(?:["])/,/^(?:$)/,/^(?:\s+)/,/^(?:[.])/],
conditions: {"SSTRING":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,61,62,63,64,66],"inclusive":true},"ERROR":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,64,65,66],"inclusive":true},"COMMENT":{"rules":[57,58],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,64,66],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = CRLGrammar;
exports.Parser = CRLGrammar.Parser;
exports.parse = function () { return CRLGrammar.parse.apply(CRLGrammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}